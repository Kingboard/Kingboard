<?php

require_once dirname(__FILE__) . '/../../../../lib/Kingboard/KillmailParser/Kingboard_KillmailParser_IdFinder.php';

/**
 * Test class for Kingboard_KillmailParser_IdFinder.
 * Generated by PHPUnit on 2011-04-05 at 16:01:50.
 */
class Kingboard_KillmailParser_IdFinderTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Kingboard_KillmailParser_IdFinder
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Kingboard_KillmailParser_IdFinder();
    }

    /**
     *
     * @test
     */
    public function getCharacterIdWithValidNameReturnCorrectId() {
        $this->assertEquals(1124526736, $this->object->getCharacterId('Trenker'));
        $this->assertEquals(179004085, $this->object->getCharacterId('Peter Powers'));
        $this->assertEquals(1457043064, $this->object->getCharacterId('Beansman'));
        $this->assertEquals(268946627, $this->object->getCharacterId('Karbowiak'));
    }

    /**
     *
     * @test
     * @expectedException UnexpectedValueException
     */
    public function getCharacterIdWithInvalidNameRaisesException() {
        $this->object->getCharacterId('Bartholomeus Mauritius');
    }

    /**
     *
     * @test
     */
    public function getSolarSystemIdWithValidNameReturnsCorrectId() {
        $expected = 30000001;
        $actual   = $this->object->getSolarSystemId('Tanoo');
        $this->assertEquals($expected, $actual, 'Invalid solar system ID for Tanoo');
        $expected = 30002053;
        $actual   = $this->object->getSolarSystemId('Hek');
        $this->assertEquals($expected, $actual, 'Invalid solar system ID for Hek');
        $expected = 30000761;
        $actual   = $this->object->getSolarSystemId('M4-GJ6');
        $this->assertEquals($expected, $actual, 'Invalid solar system ID for M4-GJ6');
    }

    /**
     *
     * @test
     * @expectedException UnexpectedValueException
     */
    public function getSolarSystemIdWithInvalidNameRaisesException() {
        $this->object->getSolarSystemId('Some solar system');
    }

    /**
     *
     * @test
     */
    public function getFactionIdWithValidNameReturnsCorrectId() {
        $expected = 500020;
        $actual = $this->object->getFactionId('Serpentis');
        $this->assertEquals($expected, $actual, 'Not correct faction ID for Serpentis');

        $expected = 500002;
        $actual = $this->object->getFactionId('Minmatar Republic');
        $this->assertEquals($expected, $actual, 'Not correct faction ID for Minmatar Republic');

        $expected = 500003;
        $actual = $this->object->getFactionId('Amarr Empire');
        $this->assertEquals($expected, $actual, 'Not correct faction ID for Amarr Empire');
    }

    /**
     * 
     * @test
     * @expectedException UnexpectedValueException
     */
    public function getFactionIdWithInvalidNameRaisesException() {
        $this->object->getFactionId('Some non existing faction');
    }

    /**
     *
     * @test
     */
    public function getCorporationIdWithValidNameReturnsCorrectId() {
        $expected = 98014265;
        $actual = $this->object->getCorporationId('Justice Legion.');
        $this->assertEquals($expected, $actual, 'Not correct corp ID for Justice Legion.');

        $expected = 354495185;
        $actual = $this->object->getCorporationId('G0P-ST0P');
        $this->assertEquals($expected, $actual, 'Not correct corp ID for G0P-ST0P');

        $expected = 1000057;
        $actual = $this->object->getCorporationId('Boundless Creation');
        $this->assertEquals($expected, $actual, 'Not correct corp ID for Boundless Creation');
    }

    /**
     *
     * @test
     * @expectedException UnexpectedValueException
     */
    public function getCorporationIdWithInvalidNameRaisesException() {
        $this->object->getCorporationId('Some non existing corp');
    }

    /**
     *
     * @test
     */
    public function getAllianceIdWithValidNameReturnsCorrectId() {
        $expected = 468455704;
        $actual = $this->object->getAllianceId('SUB ZERO Alliance');
        $this->assertEquals($expected, $actual, 'Not correct alliance ID for SUB ZERO Alliance');

        $expected = 1698753304;
        $actual = $this->object->getAllianceId('R.A.G.E');
        $this->assertEquals($expected, $actual, 'Not correct alliance ID for R.A.G.E');

        $expected = 288377808;
        $actual = $this->object->getAllianceId('Against ALL Authorities');
        $this->assertEquals($expected, $actual, 'Not correct alliance ID for Against ALL Authorities');
    }

    /**
     *
     * @test
     * @expectedException UnexpectedValueException
     */
    public function getAllianceIdWithInvalidNameRaisesException() {
        $this->object->getAllianceId('Some non existing alli');
    }

    /**
     *
     * @test
     */
    public function getItemIdWithValidNameReturnsCorrectId() {
        $expected = 414001936;
        $actual = $this->object->getAllianceId('Sabretooth');
        $this->assertEquals($expected, $actual, 'Not correct item ID for Sabretooth');

        $expected = 90414973;
        $actual = $this->object->getAllianceId('Hobgoblin I');
        $this->assertEquals($expected, $actual, 'Not correct item ID for Hobgoblin I');

        $expected = 1542009832;
        $actual = $this->object->getAllianceId('Hurricane');
        $this->assertEquals($expected, $actual, 'Not correct item ID for Hurricane');
    }

    /**
     *
     * @test
     * @expectedException UnexpectedValueException
     */
    public function getItemIdWithInvalidNameRaisesException() {
        $this->object->getAllianceId('Some non existing alli');
    }
}

<?php

require_once dirname(__FILE__) . '/../../../../lib/Kingboard/KillmailParser/Kingboard_KillmailParser_Line.php';

/**
 * Test class for Kingboard_KillmailParser_Line.
 * Generated by PHPUnit on 2011-04-04 at 22:49:19.
 */
class Kingboard_KillmailParser_LineTest extends PHPUnit_Framework_TestCase {

    protected $tokens;

    public function  setUp() {
        $this->tokens = new Kingboard_KillmailParser_EnglishTokens();
        parent::setUp();
    }

    /**
     *
     * @test
     */
    public function validDateDoesNotReturnAnErrorAndGeneratesATimestamp() {
        $time = date('Y.m.d H:i', time() - 3600);
        $expected = strtotime(str_replace('.', '-', $time));
        $line = new Kingboard_KillmailParser_Line($time, $this->tokens);

        $actual = $line->getValue();
        $this->assertEquals($expected, $actual, 'Time is not valid');
        $this->assertFalse($line->isEmpty(), 'Time given, but seems to be empty');
        $this->assertTrue($line->getType() === Kingboard_KillmailParser_Line::TYPE_TIME);
    }

    public function victimLinesDataProvider() {
        return array(
            array('Victim: Trenker', 'Trenker', Kingboard_KillmailParser_Line::TYPE_NAME, false, false),
            array('Victim: Alois Trenker', 'Alois Trenker', Kingboard_KillmailParser_Line::TYPE_NAME, false, false),
            array('Victim: Trenker\'s', 'Trenker\'s', Kingboard_KillmailParser_Line::TYPE_NAME, false, false),
            array('Victim: Tren ker\'s', 'Tren ker\'s', Kingboard_KillmailParser_Line::TYPE_NAME, false, false),
            array('Victim: Tr enk er', 'Tr enk er', Kingboard_KillmailParser_Line::TYPE_NAME, false, false),
            array('Victim: Tr\'enk\'er', 'Tr\'enk\'er', Kingboard_KillmailParser_Line::TYPE_NAME, false, false),
            array('Victim: Tr\'enk er', 'Tr\'enk er', Kingboard_KillmailParser_Line::TYPE_NAME, false, false),
            array('Victim: Tr\'e nk er', 'Tr\'e nk er', Kingboard_KillmailParser_Line::TYPE_NAME, false, false),
            array('Victim: Tr enkößr', '', Kingboard_KillmailParser_Line::TYPE_UNKNOWN, true, false),
            array('Victim: \'Trenker', '', Kingboard_KillmailParser_Line::TYPE_UNKNOWN, true, false),
            array('Name: Trenker', 'Trenker', Kingboard_KillmailParser_Line::TYPE_NAME, false, false),
            array('Name: Alois Trenker', 'Alois Trenker', Kingboard_KillmailParser_Line::TYPE_NAME, false, false),
            array('Name: Trenker\'s', 'Trenker\'s', Kingboard_KillmailParser_Line::TYPE_NAME, false, false),
            array('Name: Tren ker\'s', 'Tren ker\'s', Kingboard_KillmailParser_Line::TYPE_NAME, false, false),
            array('Name: Trenker (laid the final blow)', 'Trenker', Kingboard_KillmailParser_Line::TYPE_NAME, false, true),
            array('Name: Alois Trenker (laid the final blow)', 'Alois Trenker', Kingboard_KillmailParser_Line::TYPE_NAME, false, true),
            array('Name: Trenker\'s (laid the final blow)', 'Trenker\'s', Kingboard_KillmailParser_Line::TYPE_NAME, false, true),
            array('Name: Tren ker\'s (laid the final blow)', 'Tren ker\'s', Kingboard_KillmailParser_Line::TYPE_NAME, false, true),
        );
    }

    /**
     *
     * @test
     * @dataProvider victimLinesDataProvider
     */
    public function validVictimDetected($lineToTest, $expectedValue, $expectedType, $expectedEmpty, $expectedFinalBlow) {
        $line = new Kingboard_KillmailParser_Line($lineToTest, $this->tokens);
        $this->assertEquals($expectedValue, $line->getValue(), 'Name value not valid');
        $this->assertEquals($expectedType, $line->getType(), 'Name type not valid');
        $this->assertEquals($expectedEmpty, $line->isEmpty(), 'Name isEmpty not valid');
        $this->assertEquals($expectedFinalBlow, $line->hasFinalBlow(), 'Name final blow not valid');
    }

    public function corpLinesDataProvider() {
        return array(
            array('Corp: REUNI0N Holding', 'REUNI0N Holding', Kingboard_KillmailParser_Line::TYPE_CORP, false),
            array('Corp: The All-Seeing Eye', 'The All-Seeing Eye', Kingboard_KillmailParser_Line::TYPE_CORP, false),
            array('Corp: Macabre Votum', 'Macabre Votum', Kingboard_KillmailParser_Line::TYPE_CORP, false),
            array('Corp: Double Tap.', 'Double Tap.', Kingboard_KillmailParser_Line::TYPE_CORP, false),
            array('Corp: Pod Liberation Authority', 'Pod Liberation Authority', Kingboard_KillmailParser_Line::TYPE_CORP, false),
            array('Corp: Bulls and Cows', 'Bulls and Cows', Kingboard_KillmailParser_Line::TYPE_CORP, false),
            array('Corp: Genos Occidere', 'Genos Occidere', Kingboard_KillmailParser_Line::TYPE_CORP, false),
            array('Corp: Justice Legion.', 'Justice Legion.', Kingboard_KillmailParser_Line::TYPE_CORP, false),
            array('Corp: G0P-ST0P', 'G0P-ST0P', Kingboard_KillmailParser_Line::TYPE_CORP, false),
            array('Corp: None', 'None', Kingboard_KillmailParser_Line::TYPE_CORP, true)
        );
    }

    /**
     *
     * @test
     * @dataProvider corpLinesDataProvider
     */
    public function corpDetected($lineToTest, $expectedValue, $expectedType, $expectedEmpty) {
        $line = new Kingboard_KillmailParser_Line($lineToTest, $this->tokens);
        $this->assertEquals($expectedValue, $line->getValue(), 'Corp value not valid');
        $this->assertEquals($expectedType, $line->getType(), 'Corp type not valid');
        $this->assertEquals($expectedEmpty, $line->isEmpty(), 'Corp isEmpty not valid');
    }

    public function allianceLinesDataProvider() {
        return array(
            array('Alliance: RED Citizens', 'RED Citizens', Kingboard_KillmailParser_Line::TYPE_ALLIANCE, false),
            array('Alliance: The All-Seeing Eye', 'The All-Seeing Eye', Kingboard_KillmailParser_Line::TYPE_ALLIANCE, false),
            array('Alliance: Macabre Votum', 'Macabre Votum', Kingboard_KillmailParser_Line::TYPE_ALLIANCE, false),
            array('Alliance: Double Tap.', 'Double Tap.', Kingboard_KillmailParser_Line::TYPE_ALLIANCE, false),
            array('Alliance: Pod Liberation Authority', 'Pod Liberation Authority', Kingboard_KillmailParser_Line::TYPE_ALLIANCE, false),
            array('Alliance: Bulls and Cows', 'Bulls and Cows', Kingboard_KillmailParser_Line::TYPE_ALLIANCE, false),
            array('Alliance: Genos Occidere', 'Genos Occidere', Kingboard_KillmailParser_Line::TYPE_ALLIANCE, false),
            array('Alliance: Justice Legion.', 'Justice Legion.', Kingboard_KillmailParser_Line::TYPE_ALLIANCE, false),
            array('Alliance: None', 'None', Kingboard_KillmailParser_Line::TYPE_ALLIANCE, true)
        );
    }

    /**
     *
     * @test
     * @dataProvider allianceLinesDataProvider
     */
    public function allianceDetected($lineToTest, $expectedValue, $expectedType, $expectedEmpty) {
        $line = new Kingboard_KillmailParser_Line($lineToTest, $this->tokens);
        $this->assertEquals($expectedValue, $line->getValue(), 'Alliance value not valid');
        $this->assertEquals($expectedType, $line->getType(), 'Alliance type not valid');
        $this->assertEquals($expectedEmpty, $line->isEmpty(), 'Alliance isEmpty not valid');
    }


    public function factionLinesDataProvider() {
        return array(
            array('Faction: Serpentis', 'Serpentis', Kingboard_KillmailParser_Line::TYPE_FACTION, false),
            array('Faction: Minmatar Republic', 'Minmatar Republic', Kingboard_KillmailParser_Line::TYPE_FACTION, false),
            array('Faction: None', 'None', Kingboard_KillmailParser_Line::TYPE_FACTION, true),
            array('Faction: NONE', 'NONE', Kingboard_KillmailParser_Line::TYPE_FACTION, true)
        );
    }

    /**
     *
     * @test
     * @dataProvider factionLinesDataProvider
     */
    public function factionDetected($lineToTest, $expectedValue, $expectedType, $expectedEmpty) {
        $line = new Kingboard_KillmailParser_Line($lineToTest, $this->tokens);
        $this->assertEquals($expectedValue, $line->getValue(), 'Faction value not valid');
        $this->assertEquals($expectedType, $line->getType(), 'Faction type not valid');
        $this->assertEquals($expectedEmpty, $line->isEmpty(), 'Faction isEmpty not valid');
    }

    public function shipDataProvider() {
        return array(
           array('Destroyed: Thanatos', 'Thanatos', Kingboard_KillmailParser_Line::TYPE_SHIP, false),
           array('Destroyed: Nyx', 'Nyx', Kingboard_KillmailParser_Line::TYPE_SHIP, false),
           array('Destroyed: Avatar', 'Avatar', Kingboard_KillmailParser_Line::TYPE_SHIP, false),
           array('Destroyed: Hurricane', 'Hurricane', Kingboard_KillmailParser_Line::TYPE_SHIP, false),
           array('Destroyed: Rifter', 'Rifter', Kingboard_KillmailParser_Line::TYPE_SHIP, false),
           array('Destroyed: Drake', 'Drake', Kingboard_KillmailParser_Line::TYPE_SHIP, false),
           array('Destroyed: Unknown', 'Unknown', Kingboard_KillmailParser_Line::TYPE_SHIP, true),
           array('Destroyed: None', 'None', Kingboard_KillmailParser_Line::TYPE_SHIP, true),
           array('Ship: Thanatos', 'Thanatos', Kingboard_KillmailParser_Line::TYPE_SHIP, false),
           array('Ship: Nyx', 'Nyx', Kingboard_KillmailParser_Line::TYPE_SHIP, false),
           array('Ship: Avatar', 'Avatar', Kingboard_KillmailParser_Line::TYPE_SHIP, false),
           array('Ship: Hurricane', 'Hurricane', Kingboard_KillmailParser_Line::TYPE_SHIP, false),
           array('Ship: Rifter', 'Rifter', Kingboard_KillmailParser_Line::TYPE_SHIP, false),
           array('Ship: Drake', 'Drake', Kingboard_KillmailParser_Line::TYPE_SHIP, false),
           array('Ship: Unknown', 'Unknown', Kingboard_KillmailParser_Line::TYPE_SHIP, true),
           array('Ship: None', 'None', Kingboard_KillmailParser_Line::TYPE_SHIP, true)
        );
    }

    /**
     *
     * @test
     * @dataProvider shipDataProvider
     */
    public function attackerOrVictimShipDetected($lineToTest, $expectedValue, $expectedType, $expectedEmpty) {
        $line = new Kingboard_KillmailParser_Line($lineToTest, $this->tokens);
        $this->assertEquals($expectedValue, $line->getValue(), 'Ship value not valid');
        $this->assertEquals($expectedType, $line->getType(), 'Ship type not valid');
        $this->assertEquals($expectedEmpty, $line->isEmpty(), 'Ship isEmpty not valid');
    }

    public function systemsDataProvider() {
        return array(
            array('System: Hek', 'Hek', Kingboard_KillmailParser_Line::TYPE_SYSTEM, false),
            array('System: Jita', 'Jita', Kingboard_KillmailParser_Line::TYPE_SYSTEM, false),
            array('System: M4-GJ6', 'M4-GJ6', Kingboard_KillmailParser_Line::TYPE_SYSTEM, false),
            array('System: FDL-6HL', 'FDL-6HL', Kingboard_KillmailParser_Line::TYPE_SYSTEM, false),
            array('System: Unknown', 'Unknown', Kingboard_KillmailParser_Line::TYPE_SYSTEM, true)
        );
    }

    /**
     *
     * @test
     * @dataProvider systemsDataProvider
     */
    public function detectSystem($lineToTest, $expectedValue, $expectedType, $expectedEmpty) {
        $line = new Kingboard_KillmailParser_Line($lineToTest, $this->tokens);
        $this->assertEquals($expectedValue, $line->getValue(), 'System value not valid');
        $this->assertEquals($expectedType, $line->getType(), 'System type not valid');
        $this->assertEquals($expectedEmpty, $line->isEmpty(), 'System isEmpty not valid');
    }


    public function securityDataProvider() {
        return array(
            array('Security: 0.0', 0.0, Kingboard_KillmailParser_Line::TYPE_SECURITY, false),
            array('Security: 0.3324', 0.3324, Kingboard_KillmailParser_Line::TYPE_SECURITY, false),
            array('Security: 2.345', 2.345, Kingboard_KillmailParser_Line::TYPE_SECURITY, false),
            array('Security: -2.343', -2.343, Kingboard_KillmailParser_Line::TYPE_SECURITY, false),
            array('Security: 5', 5.0, Kingboard_KillmailParser_Line::TYPE_SECURITY, false),
            array('Security: 23', null, Kingboard_KillmailParser_Line::TYPE_UNKNOWN, true),
            array('Security: 10.01', null, Kingboard_KillmailParser_Line::TYPE_UNKNOWN, true),
            array('Security: 10.01', null, Kingboard_KillmailParser_Line::TYPE_UNKNOWN, true),
            array('Security: -10.01', null, Kingboard_KillmailParser_Line::TYPE_UNKNOWN, true),
            array('Security: -12.01', null, Kingboard_KillmailParser_Line::TYPE_UNKNOWN, true),
        );
    }
    /**
     *
     * @test
     * @dataProvider securityDataProvider
     */
    public function detectSecurity($lineToTest, $expectedValue, $expectedType, $expectedEmpty) {
        $line = new Kingboard_KillmailParser_Line($lineToTest, $this->tokens);
        $this->assertEquals($expectedValue, $line->getValue(), 'System value not valid');
        $this->assertEquals($expectedType, $line->getType(), 'System type not valid');
        $this->assertEquals($expectedEmpty, $line->isEmpty(), 'System isEmpty not valid');
    }
    
    public function damageDataProvider() {
        return array(
            array('Damage Taken: 234443', 234443, Kingboard_KillmailParser_Line::TYPE_DAMAGE, false),
            array('Damage Taken: 20', 20, Kingboard_KillmailParser_Line::TYPE_DAMAGE, false),
            array('Damage Taken: 33', 33, Kingboard_KillmailParser_Line::TYPE_DAMAGE, false),
            array('Damage Taken: 345', 345, Kingboard_KillmailParser_Line::TYPE_DAMAGE, false),
            array('Damage Taken: -32432', null, Kingboard_KillmailParser_Line::TYPE_UNKNOWN, true),
            array('Damage Taken: 4', null, Kingboard_KillmailParser_Line::TYPE_UNKNOWN, true),
            array('Damage Taken: 0', null, Kingboard_KillmailParser_Line::TYPE_UNKNOWN, true),
            array('Damage Done: 234443', 234443, Kingboard_KillmailParser_Line::TYPE_DAMAGE, false),
            array('Damage Done: 20', 20, Kingboard_KillmailParser_Line::TYPE_DAMAGE, false),
            array('Damage Done: 33', 33, Kingboard_KillmailParser_Line::TYPE_DAMAGE, false),
            array('Damage Done: 345', 345, Kingboard_KillmailParser_Line::TYPE_DAMAGE, false),
            array('Damage Done: -32432', null, Kingboard_KillmailParser_Line::TYPE_UNKNOWN, true),
            array('Damage Done: 4', 4, Kingboard_KillmailParser_Line::TYPE_DAMAGE, false),
            array('Damage Done: 0', 0, Kingboard_KillmailParser_Line::TYPE_DAMAGE, false),
        );
    }
    
    /**
     *
     * @test
     * @dataProvider damageDataProvider
     */
    public function detectDamageDoneAndDamageTaken($lineToTest, $expectedValue, $expectedType, $expectedEmpty) {
        $line = new Kingboard_KillmailParser_Line($lineToTest, $this->tokens);
        $this->assertEquals($expectedValue, $line->getValue(), 'Damage value not valid');
        $this->assertEquals($expectedType, $line->getType(), 'Damage type not valid');
        $this->assertEquals($expectedEmpty, $line->isEmpty(), 'Damage isEmpty not valid');
    }

    public function switchDataProvider() {
        return array(
            array('Destroyed items:', Kingboard_KillmailParser_Line::TYPE_SWITCH_ITEMS),
            array('Dropped items:', Kingboard_KillmailParser_Line::TYPE_SWITCH_DROPPED),
            array('Involved parties:', Kingboard_KillmailParser_Line::TYPE_SWITCH_ATTACKERS)
        );
    }

    /**
     *
     * @test
     * @dataProvider switchDataProvider
     */
    public function detectSwitches($line, $expectedType) {
        $line = new Kingboard_KillmailParser_Line($line, $this->tokens);
        $this->assertEquals($expectedType, $line->getType(), 'Switch type not correct');
    }

    public function itemsDataProvider() {
        return array(
            array('10M Afterburner I', '10M Afterburner I', 1, false, false, false),
            array('10M Afterburner I, Qty: 10', '10M Afterburner I', 10, false, false, false),
            array('10M Afterburner I (Drone Bay)', '10M Afterburner I', 1, true, false, false),
            array('10M Afterburner I, Qty: 10 (Drone Bay)', '10M Afterburner I', 10, true, false, false),
            array('10M Afterburner I (Cargo)', '10M Afterburner I', 1, false, true, false),
            array('10M Afterburner I, Qty: 10 (Cargo)', '10M Afterburner I', 10, false, true, false),
            array('    10M Afterburner I (In Container)', '10M Afterburner I', 1, false, false, true),
            array('    10M Afterburner I, Qty: 10 (In Container)', '10M Afterburner I', 10, false, false, true),
        );
    }

    /**
     *
     * @test
     * @dataProvider itemsDataProvider
     */
    public function detectItemAndProperties($line, $expectedValue, $expectedQty, $expectedDrone, $expectedCargo, $expectedContainer) {
        $line = new Kingboard_KillmailParser_Line($line, $this->tokens);
        $this->assertEquals($expectedValue, $line->getValue(), 'Item value not correct');
        $this->assertEquals($expectedQty, $line->getQty(), 'Item qty not correct');
        $this->assertEquals($expectedDrone, $line->isDrone(), 'Item drone not correct');
        $this->assertEquals(Kingboard_KillmailParser_Line::TYPE_ITEM, $line->getType(), 'Item type not correct');
        $this->assertEquals($expectedContainer, $line->inContainer(), 'container not correct');
    }
}

?>

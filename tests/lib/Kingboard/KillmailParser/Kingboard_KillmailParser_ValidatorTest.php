<?php

require_once dirname(__FILE__) . '/../../../../lib/Kingboard/KillmailParser/Kingboard_KillmailParser_Validator.php';

/**
 * Test class for Kingboard_KillmailParser_Validator.
 * Generated by PHPUnit on 2011-04-06 at 17:59:46.
 */
class Kingboard_KillmailParser_ValidatorTest extends PHPUnit_Framework_TestCase {

    protected $testmail = "2011.04.05 20:40

Victim: Falci
Corp: Project Stealth Squad
Alliance: Majesta Empire
Faction: NONE
Destroyed: Nidhoggur
System: 4NGK-F
Security: 0.0
Damage Taken: 504457

Involved parties:

Name: Colla Camins
Security: -5.2
Corp: Tormentum Insomniae
Alliance: Raiden.
Faction: NONE
Ship: Hound
Weapon: Peripheral Weapon Navigation Diameter
Damage Done: 66210

Name: ANGAL 2000 (laid the final blow)
Security: -5.0
Corp: FinFleet
Alliance: Raiden.
Faction: NONE
Ship: Hound
Weapon: Caldari Navy Bane Torpedo
Damage Done: 48805

Name: Magnifikus Erzverwirrer
Security: -2.6
Corp: FinFleet
Alliance: Raiden.
Faction: NONE
Ship: Purifier
Weapon: Caldari Navy Mjolnir Torpedo
Damage Done: 47561

Name: SmokeDog
Security: -4.1
Corp: Nex Exercitus
Alliance: Raiden.
Faction: NONE
Ship: Hound
Weapon: Caldari Navy Bane Torpedo
Damage Done: 47165

Name: Pheonix1985
Security: 4.5
Corp: FinFleet
Alliance: Raiden.
Faction: NONE
Ship: Nemesis
Weapon: Caldari Navy Inferno Torpedo
Damage Done: 43705

Name: time 3290
Security: 1.0
Corp: The Ankou
Alliance: Raiden.
Faction: NONE
Ship: Hound
Weapon: Caldari Navy Bane Torpedo
Damage Done: 40761

Name: Zhayan Joruni
Security: 5.0
Corp: The Ankou
Alliance: Raiden.
Faction: NONE
Ship: Hound
Weapon: Caldari Navy Bane Torpedo
Damage Done: 36200

Name: Hund
Security: -3.7
Corp: x13
Alliance: Raiden.
Faction: NONE
Ship: Manticore
Weapon: Caldari Navy Juggernaut Torpedo
Damage Done: 35981

Name: Kanuti
Security: 4.9
Corp: x13
Alliance: Raiden.
Faction: NONE
Ship: Purifier
Weapon: Caldari Navy Mjolnir Torpedo
Damage Done: 25984

Name: White Panter
Security: -4.8
Corp: Tormentum Insomniae
Alliance: Raiden.
Faction: NONE
Ship: Hound
Weapon: Bane Torpedo
Damage Done: 22427

Name: Abderraman III
Security: 1.5
Corp: Tormentum Insomniae
Alliance: Raiden.
Faction: NONE
Ship: Purifier
Weapon: Caldari Navy Mjolnir Torpedo
Damage Done: 21413

Name: DJ MULER
Security: 1.9
Corp: Tormentum Insomniae
Alliance: Raiden.
Faction: NONE
Ship: Hound
Weapon: 'Malkuth' Siege Missile Launcher I
Damage Done: 20963

Name: Namof Zomgbag
Security: 4.2
Corp: FinFleet
Alliance: Raiden.
Faction: NONE
Ship: Hound
Weapon: 'Arbalest' Siege Missile Launcher
Damage Done: 20611

Name: Mo Cuishle
Security: -1.1
Corp: Tormentum Insomniae
Alliance: Raiden.
Faction: NONE
Ship: Capsule
Weapon: 'Malkuth' Siege Missile Launcher I
Damage Done: 13264

Name: Galmar Masu
Security: -9.8
Corp: x13
Alliance: Raiden.
Faction: NONE
Ship: Arazu
Weapon: Warrior II
Damage Done: 7681

Name: Edsback
Security: 0.5
Corp: Capital Maintenance
Alliance: None
Faction: NONE
Ship: Manticore
Weapon: 'Malkuth' Siege Missile Launcher I
Damage Done: 3103

Name: Kajdil
Security: -1.3
Corp: Tormentum Insomniae
Alliance: Raiden.
Faction: NONE
Ship: Falcon
Weapon: Warrior II
Damage Done: 2623

Name: Comy 2
Security: -5.0
Corp: Nex Exercitus
Alliance: Raiden.
Faction: NONE
Ship: Rapier
Weapon: Warp Disruptor II
Damage Done: 0

Name: Alex Keys
Security: 4.5
Corp: FinFleet
Alliance: Raiden.
Faction: NONE
Ship: Falcon
Weapon: 'Umbra' I White Noise ECM
Damage Done: 0


Destroyed items:

Capital Remote Armor Repair System I
Capital Shield Transporter I
Heavy Energy Neutralizer II
Triage Module I
Capital Energy Transfer Array I
Cap Recharger II
ECCM - Ladar II
Damage Control II
Armor Explosive Hardener II
Capital Armor Repairer I
Large Capacitor Control Circuit I, Qty: 3

Dropped items:

Sensor Booster II
Scan Resolution
Armor Kinetic Hardener II
Armor Thermic Hardener II
Energized Adaptive Nano Membrane II
Exotic Dancers (Cargo)
Vespa EC-600 (Drone Bay)
Ogre II (Drone Bay)
Cap Recharger II, Qty: 2
";

    /**
     * 
     * @test
     */
    public function validKillmailReturnsTrue() {
        $parser = new Kingboard_KillmailParser_Parser();
        $result = $parser->parse($this->testmail)->getDataArray();
        $v = new Kingboard_KillmailParser_Validator();
//        print_r($result);
        $this->assertTrue($v->validateKillmailData($result));
    }


    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function killTimeMustBeInteger() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateKilltime('1234567890');
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function killTimeMustBeAfterTheEveRelease() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateKilltime(20);
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function killTimeMustNotBeInTheFuture() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateKilltime(time() + 100);
    }

    /**
     *
     * @test
     */
    public function validKillTimeReturnsTrue() {
        $v = new Kingboard_KillmailParser_Validator();
        $this->assertTrue($v->validateKilltime(time() - 3600));
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function victimCharacterMustHaveNameAndIdSet() {
        $data = array(
            'characterName' => '',
            'characterID' => 123,
            'shipType' => '',
            'shipTypeID' => 0
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateVictim($data);
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function victimCharacterNameMustBeCompatibleToTheEveRequirements() {
        $data = array(
            'characterName' => 'asd_ asd_',
            'characterID' => 123234223,
            'shipType' => '',
            'shipTypeID' => 0
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateVictim($data);
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function victimCharacterIdMustBeInteger() {
        $data = array(
            'characterName' => 'Some Char',
            'characterID' => '123234223',
            'shipType' => '',
            'shipTypeID' => 0
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateVictim($data);
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function victimCharacterIdMustBeAtACertainHeight() {
        $data = array(
            'characterName' => 'Some Char',
            'characterID' => 123,
            'shipType' => '',
            'shipTypeID' => 0
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateVictim($data);
    }


    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function victimCorporationMustBeSet() {
        $data = array(
            'characterName' => 'Some Char',
            'characterID' => 1234567,
            'corporationName' => '',
            'corporationID' => 0,
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateVictim($data);
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function victimCorporationNameMustMeetTheEveRequiremets() {
        $data = array(
            'characterName' => 'Some Char',
            'characterID' => 1234567,
            'corporationName' => '_asd3rdd ds_sf sf+',
            'corporationID' => 0
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateVictim($data);
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function victimCorporationIdMustBeAtACertainAmount() {
        $data = array(
            'characterName' => 'Some Char',
            'characterID' => 1234567,
            'corporationName' => 'Some Corporation',
            'corporationID' => 100
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateVictim($data);
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function victimAllianceMustBeValidIfSet() {
        $data = array(
            'characterName' => 'Some Char',
            'characterID' => 1234567,
            'corporationName' => 'Some Corporation',
            'corporationID' => 112354,
            'allianceName' => '__sdf_+',
            'allianceID' => 123556
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateVictim($data);
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function victimFactionMustBeValidIfSet() {
        $data = array(
            'characterName' => 'Some Char',
            'characterID' => 1234567,
            'corporationName' => 'Some Corporation',
            'corporationID' => 112354,
            'allianceName' => 'Some Alliance',
            'allianceID' => 123556,
            'factionName' => 'Some Faction++',
            'factionID' => 123455
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateVictim($data);
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function victimDamageTakenMustBeSet() {
        $data = array(
            'characterName' => 'Some Char',
            'characterID' => 1234567,
            'corporationName' => 'Some Corporation',
            'corporationID' => 112354,
            'allianceName' => 'Some Alliance',
            'allianceID' => 123556,
            'factionName' => 'Some Faction',
            'factionID' => 123455,
            'damageTaken' => null
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateVictim($data);
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function victimDamageTakenMustBeAnIntegerGreaterThanZero() {
        $data = array(
            'characterName' => 'Some Char',
            'characterID' => 1234567,
            'corporationName' => 'Some Corporation',
            'corporationID' => 112354,
            'allianceName' => 'Some Alliance',
            'allianceID' => 123556,
            'factionName' => 'Some Faction',
            'factionID' => 123455,
            'damageTaken' => 0
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateVictim($data);
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function victimShipTypeMustBeSet() {
        $data = array(
            'characterName' => 'Some Char',
            'characterID' => 1234567,
            'corporationName' => 'Some Corporation',
            'corporationID' => 112354,
            'allianceName' => 'Some Alliance',
            'allianceID' => 123556,
            'factionName' => 'Some Faction',
            'factionID' => 123455,
            'damageTaken' => 1234,
            'shipType' => 'Hound',
            'shipTypeID' => null,
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateVictim($data);
    }

    /**
     *
     * @test
     */
    public function victimValidationReturnsTrueOnSuccess() {
        $data = array(
            'characterName' => 'Some Char',
            'characterID' => 1234567,
            'corporationName' => 'Some Corporation',
            'corporationID' => 112354,
            'allianceName' => 'Some Alliance',
            'allianceID' => 123556,
            'factionName' => 'Some Faction',
            'factionID' => 123455,
            'damageTaken' => 1234,
            'shipType' => 'Hound',
            'shipTypeID' => 123456,
        );
        $v = new Kingboard_KillmailParser_Validator();
        $this->assertTrue($v->validateVictim($data));
    }

    /**
     *
     * @test
     */
    public function victimCharacterIsOptionalIfShipTypeIsAStructure() {
        $data = array(
            'characterName' => '',
            'characterID' => 0,
            'corporationName' => 'Some Corporation',
            'corporationID' => 112354,
            'allianceName' => 'Some Alliance',
            'allianceID' => 123556,
            'factionName' => 'Some Faction',
            'factionID' => 123455,
            'damageTaken' => 1234,
            'shipType' => 'Minmatar Control Tower',
            'shipTypeID' => 16214,
        );
        $v = new Kingboard_KillmailParser_Validator();
        $this->assertTrue($v->validateVictim($data));
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function victimCharacterMustBeValidIfSetOnStructure() {
        $data = array(
            'characterName' => 'Some Char',
            'characterID' => 0,
            'corporationName' => 'Some Corporation',
            'corporationID' => 112354,
            'allianceName' => 'Some Alliance',
            'allianceID' => 123556,
            'factionName' => 'Some Faction',
            'factionID' => 123455,
            'damageTaken' => 1234,
            'shipType' => 'Minmatar Control Tower',
            'shipTypeID' => 16214,
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateVictim($data);
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function organizationNameMustBeLongEnough() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateOrganisationName('a');
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function organizationNameMustNotBeTooLong() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateOrganisationName('1234567890poiuztrewqasdfghjklmnbvcxy 1234567890poiuztrewqasdfghjklmnbvcxy 1234567890poiuztrewqasdfghjklmnbvcxy ');
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function organizationNameMustNotContainInvalidCharacters() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateOrganisationName('123456_7890poiu+dfghjkl');
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function organizationNameMustNotContainValidSpecialCharacterAtStart() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateOrganisationName('.1234567890poiudfghjkl');
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function organizationNameMustNotContainValidSpecialCharacterAtTheEnd() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateOrganisationName('1234567890poiudfghjkl-');
    }

    /**
     * @test
     */
    public function validOrganizationNameMustReturnTrue() {
        $v = new Kingboard_KillmailParser_Validator();
        $this->assertTrue($v->validateOrganisationName('1234567890poiudfghjkl'));
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function characterNameMustBeLongEnough() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateCharacterName('abc');
    }

    /**
     *
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function characterNameMustNotBeTooLong() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateCharacterName('1234567890poiuztrewqasdfghjklmnbvcxy 1234567890poiuztrewqasdfghjklmnbvcxy 1234567890poiuztrewqasdfghjklmnbvcxy ');
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function characterNameMustNotContainInvalidCharacters() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateCharacterName('123456_7890poiu+dfghjkl');
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function characterNameMustNotContainValidSpecialCharacterAtStart() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateCharacterName('\'1234567890poiudfghjkl');
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function characterNameMustNotContainValidSpecialCharacterAtTheEnd() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateCharacterName('1234567890poiudfghjkl\'');
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function characterNameMustNotContainMoreThanOneSpace() {
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateCharacterName('1234 56789 0poiudfghjkl');
    }

    /**
     * @test
     */
    public function validcharacterNameMustReturnTrue() {
        $v = new Kingboard_KillmailParser_Validator();
        $this->assertTrue($v->validateCharacterName('1234567890poiudfghjkl'));
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function itemSetMustNotBeEmpty() {
        $item = array();
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateItem($item);
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function itemTypeMustBeSet() {
        $item = array(
            'typeName' => '',
            'typeID' => 123456,
            'qtyDropped' => 1,
            'qtyDestroyed' => 2
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateItem($item);
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function itemMustHaveAMinimalQtyOfOne() {
        $item = array(
            'typeName' => 'Some Item',
            'typeID' => 123456,
            'qtyDropped' => 0,
            'qtyDestroyed' => 0
        );
        $v = new Kingboard_KillmailParser_Validator();
        $v->validateItem($item);
    }

    /**
     * @test
     */
    public function validItemReturnsTrue() {
        $item = array(
            'typeName' => 'Some Item',
            'typeID' => 123456,
            'qtyDropped' => 2,
            'qtyDestroyed' => 0
        );
        $v = new Kingboard_KillmailParser_Validator();
        $this->assertTrue($v->validateItem($item));
    }


    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function attackerMustHaveAnCharacter() {
       $attacker = array();
       $v = new Kingboard_KillmailParser_Validator();
       $v->validateAttacker($attacker);
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function attackerCharacterNameMustBeValid() {
       $attacker = array(
           'characterName' => 'sad_',
           'characterID' => 12345
       );
       $v = new Kingboard_KillmailParser_Validator();
       $v->validateAttacker($attacker);
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function attackerCharacterIdMustBeValid() {
       $attacker = array(
           'characterName' => 'Some char',
           'characterID' => '12'
       );
       $v = new Kingboard_KillmailParser_Validator();
       $v->validateAttacker($attacker);
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function attackerMustHaveACorporation() {
       $attacker = array(
           'characterName' => 'Some char',
           'characterID' => 12123,
           'corporationName' => '',
           'corporationID' => 12334
       ); 
       $v = new Kingboard_KillmailParser_Validator();
       $v->validateAttacker($attacker);
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function attackerMustHaveAValidAllianceIfSet() {
       $attacker = array(
           'characterName' => 'Some char',
           'characterID' => 12123,
           'corporationName' => 'Some corp',
           'corporationID' => 12334,
           'allianceName' => 'as',
           'allianceID' => 23
       );
       $v = new Kingboard_KillmailParser_Validator();
       $v->validateAttacker($attacker);
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function attackerMustHaveAValidFactionIfSet() {
       $attacker = array(
           'characterName' => 'Some char',
           'characterID' => 12123,
           'corporationName' => 'Some corp',
           'corporationID' => 12334,
           'allianceName' => 'Some alli',
           'allianceID' => 234934,
           'factionName' => '',
           'factionID' => 3
       );
       $v = new Kingboard_KillmailParser_Validator();
       $v->validateAttacker($attacker);
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function attackerMustHaveADamageDoneValueSet() {
       $attacker = array(
           'characterName' => 'Some char',
           'characterID' => 12123,
           'corporationName' => 'Some corp',
           'corporationID' => 12334,
           'allianceName' => 'Some alli',
           'allianceID' => 234934,
           'factionName' => '',
           'factionID' => 3,
           'damageDone' => null,
       );
       $v = new Kingboard_KillmailParser_Validator();
       $v->validateAttacker($attacker);
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function attackerDamageDoneValueMustBeARealInteger() {
       $attacker = array(
           'characterName' => 'Some char',
           'characterID' => 12123,
           'corporationName' => 'Some corp',
           'corporationID' => 12334,
           'allianceName' => 'Some alli',
           'allianceID' => 234934,
           'factionName' => '',
           'factionID' => 3,
           'damageDone' => -2,
       );
       $v = new Kingboard_KillmailParser_Validator();
       $v->validateAttacker($attacker);
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function attackerMustHaveAValidShipType() {
       $attacker = array(
           'characterName' => 'Some char',
           'characterID' => 12123,
           'corporationName' => 'Some corp',
           'corporationID' => 12334,
           'allianceName' => 'Some alli',
           'allianceID' => 234934,
           'factionName' => '',
           'factionID' => 3,
           'damageDone' => 2345,
           'shipTypeID' => 0,
           'shipType' => ''
       );
       $v = new Kingboard_KillmailParser_Validator();
       $v->validateAttacker($attacker);
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function attackerMustHaveAValidWeaponType() {
       $attacker = array(
           'characterName' => 'Some char',
           'characterID' => 12123,
           'corporationName' => 'Some corp',
           'corporationID' => 12334,
           'allianceName' => 'Some alli',
           'allianceID' => 234934,
           'factionName' => '',
           'factionID' => 3,
           'damageDone' => 2345,
           'shipTypeID' => 12345,
           'shipType' => 'Rifter',
           'weaponType' => '',
           'weaponTypeID' => 34445,
       );
       $v = new Kingboard_KillmailParser_Validator();
       $v->validateAttacker($attacker);
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function attackerMustHaveAValidSecurityStatus() {
       $attacker = array(
           'characterName' => 'Some char',
           'characterID' => 12123,
           'corporationName' => 'Some corp',
           'corporationID' => 12334,
           'allianceName' => 'Some alli',
           'allianceID' => 234934,
           'factionName' => '',
           'factionID' => 3,
           'damageDone' => 2345,
           'shipTypeID' => 12345,
           'shipType' => 'Rifter',
           'weaponType' => 'Light Ion Blaster I',
           'weaponTypeID' => 34445,
           'securityStatus' => -12
       );
       $v = new Kingboard_KillmailParser_Validator();
       $v->validateAttacker($attacker);
    }

    /**
     * @test
     * @expectedException Kingboard_KillmailParser_KillmailErrorException
     */
    public function attackerMustHaveAFinalBlowBoolean() {
       $attacker = array(
           'characterName' => 'Some char',
           'characterID' => 12123,
           'corporationName' => 'Some corp',
           'corporationID' => 12334,
           'allianceName' => 'Some alli',
           'allianceID' => 234934,
           'factionName' => '',
           'factionID' => 3,
           'damageDone' => 2345,
           'shipTypeID' => 12345,
           'shipType' => 'Rifter',
           'weaponType' => 'Light Ion Blaster I',
           'weaponTypeID' => 34445,
           'securityStatus' => -3.45,
           'finalBlow' => 1
       );
       $v = new Kingboard_KillmailParser_Validator();
       $v->validateAttacker($attacker);
    }

    /**
     * @test
     */
    public function validAttackerReturnsTrue() {
       $attacker = array(
           'characterName' => 'Some char',
           'characterID' => 12123,
           'corporationName' => 'Some corp',
           'corporationID' => 12334,
           'allianceName' => 'Some alli',
           'allianceID' => 234934,
           'factionName' => '',
           'factionID' => 3,
           'damageDone' => 2345,
           'shipTypeID' => 12345,
           'shipType' => 'Rifter',
           'weaponType' => 'Light Ion Blaster I',
           'weaponTypeID' => 34445,
           'securityStatus' => -3.45,
           'finalBlow' => false
       );
       $v = new Kingboard_KillmailParser_Validator();
       $this->assertTrue($v->validateAttacker($attacker));
    }

    /**
     * @test
     */
    public function validAttackerCanBeATypeNpc() {
       $attacker = array(
           'characterName' => 'Blood Diviner',
           'characterID' => 1000134,
           'corporationName' => 'Blood Raiders',
           'corporationID' => 12334,
           'allianceName' => 'Some alli',
           'allianceID' => 234934,
           'factionName' => '',
           'factionID' => 3,
           'damageDone' => 2345,
           'shipTypeID' => 12345,
           'shipType' => 'Rifter',
           'weaponType' => 'Light Ion Blaster I',
           'weaponTypeID' => 34445,
           'securityStatus' => -3.45,
           'finalBlow' => false
       );
       $v = new Kingboard_KillmailParser_Validator();
       $this->assertTrue($v->validateAttacker($attacker));
    }
}

?>

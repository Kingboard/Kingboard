<?php

require_once dirname(__FILE__) . '/../../../../lib/Kingboard/KillmailParser/Kingboard_KillmailParser_EnglishTokens.php';

/**
 * Test class for Kingboard_KillmailParser_EnglishTokens.
 * Generated by PHPUnit on 2011-04-04 at 19:49:03.
 */
class Kingboard_KillmailParser_EnglishTokensTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Kingboard_KillmailParser_EnglishTokens
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Kingboard_KillmailParser_EnglishTokens;
    }


    public function testAlliance() {
        $actual = $this->object->alliance();
        $expected = 'Alliance:';
        $this->assertEquals($expected, $actual, 'Actual alliance token  not valid');
    }

    public function testCorp() {
        $expected = 'Corp:';
        $actual = $this->object->corp();
        $this->assertEquals($expected, $actual, 'Actual corp token  not valid');
    }

    public function testDamageDone() {
        $expected = 'Damage Done:';
        $actual = $this->object->damageDone();
        $this->assertEquals($expected, $actual, 'Damage done token not valid');
    }

    public function testDamageTaken() {
        $expected = 'Damage Taken:';
        $actual = $this->object->damageTaken();
        $this->assertEquals($expected, $actual, 'Damage taken token not valid');
    }

    public function testDestroyed() {
        $expected = 'Destroyed:';
        $actual = $this->object->destroyed();
        $this->assertEquals($expected, $actual, 'Destroyed ship token not valid');
    }

    public function testDestroyedItems() {
        $expected = 'Destroyed items:';
        $actual = $this->object->destroyedItems();
        $this->assertEquals($expected, $actual, 'Destroyed items list token not valid');
    }

    public function testDroppedItems() {
        $expected = 'Dropped items:';
        $actual = $this->object->droppedItems();
        $this->assertEquals($expected, $actual, 'Dropped items list token not valid');
    }

    public function testFaction() {
        $expected = 'Faction:';
        $actual = $this->object->faction();
        $this->assertEquals($expected, $actual, 'Faction name token not valid');
    }

    public function testInvolvedParties() {
        $expected = 'Involved parties:';
        $actual = $this->object->involvedParties();
        $this->assertEquals($expected, $actual, 'Involved parties list token not valid');
    }

    public function testName() {
        $expected = 'Name:';
        $actual = $this->object->name();
        $this->assertEquals($expected, $actual, 'Name token not valid');
    }

    public function testQty() {
        $expected = ', Qty:';
        $actual = $this->object->qty();
        $this->assertEquals($expected, $actual, 'Qty token not valid');

    }

    public function testSecurity() {
        $expected = 'Security:';
        $actual = $this->object->security();
        $this->assertEquals($expected, $actual, 'Security token not valid');
    }

    public function testShip() {
        $expected = 'Ship:';
        $actual = $this->object->ship();
        $this->assertEquals($expected, $actual, 'Security token not valid');
    }

    public function testSystem() {
        $expected = 'System:';
        $actual = $this->object->system();
        $this->assertEquals($expected, $actual, 'System name token not valid');
    }

    public function testVictim() {
        $expected = 'Victim:';
        $actual = $this->object->victim();
        $this->assertEquals($expected, $actual, 'Victim character name token not valid');
    }

    public function testWeapon() {
        $expected = 'Weapon:';
        $actual = $this->object->weapon();
        $this->assertEquals($expected, $actual, 'Main weapon token not valid');
    }

    public function testFinalBlow() {
        $expected = '(laid the final blow)';
        $actual = $this->object->finalBlow();
        $this->assertEquals($expected, $actual, 'Laid the final blow token not valid');
    }

    public function testDrone() {
        $expected = '(Drone Bay)';
        $actual = $this->object->drone();
        $this->assertEquals($expected, $actual, 'Drone bay token not valid');
    }

    public function testCargo() {
        $expected = '(Cargo)';
        $actual = $this->object->cargo();
        $this->assertEquals($expected, $actual, 'Cargo bay token not valid');
    }

    public function testContainer() {
        $expected = '(In Container)';
        $actual = $this->object->container();
        $this->assertEquals($expected, $actual, 'In container token not valid');
    }

    public function testMoon() {
        $expected = 'Moon:';
        $actual = $this->object->moon();
        $this->assertEquals($expected, $actual, 'Moon token not valid');
    }
}

?>

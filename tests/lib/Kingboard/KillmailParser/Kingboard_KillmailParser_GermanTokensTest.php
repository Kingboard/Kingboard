<?php

require_once dirname(__FILE__) . '/../../../../lib/Kingboard/KillmailParser/Kingboard_KillmailParser_GermanTokens.php';

/**
 * Test class for Kingboard_KillmailParser_GermanTokens.
 * Generated by PHPUnit on 2011-04-10 at 09:06:39.
 */
class Kingboard_KillmailParser_GermanTokensTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Kingboard_KillmailParser_GermanTokens
     */
    protected $fixture;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->fixture = new Kingboard_KillmailParser_GermanTokens;
    }

    public function testAlliance() {
        $expected = 'Allianz:';
        $actual = $this->fixture->alliance();
        $this->assertEquals($expected, $actual);
    }

    public function testCargo() {
        $this->markTestIncomplete('Still need that token');
    }

    public function testContainer() {
        $this->markTestIncomplete('Still need that token');
    }

    public function testCorp() {
        $expected = 'Corporation:';
        $actual = $this->fixture->corp();
        $this->assertEquals($expected, $actual);
    }

    public function testDamageDone() {
        $expected = 'Verursachter Schaden:';
        $actual = $this->fixture->damageDone();
        $this->assertEquals($expected, $actual);
    }

    public function testDamageTaken() {
        $expected = 'Erlittener Schaden:';
        $actual = $this->fixture->damageTaken();
        $this->assertEquals($expected, $actual);
    }

    public function testDestroyed() {
        $expected = 'Zerstört:';
        $actual = $this->fixture->destroyed();
        $this->assertEquals($expected, $actual);
    }

    public function testDestroyedItems() {
        $expected = 'Zerstörte Gegenstände:';
        $actual = $this->fixture->destroyedItems();
        $this->assertEquals($expected, $actual);
    }

    public function testDrone() {
        $expected = '(Drohnenhangar)';
        $actual = $this->fixture->drone();
        $this->assertEquals($expected, $actual);
    }

    public function testDroppedItems() {
        $expected = 'Hinterlassene Gegenstände:';
        $actual = $this->fixture->droppedItems();
        $this->assertEquals($expected, $actual);
    }

    public function testFaction() {
        $expected = 'Fraktion:';
        $actual = $this->fixture->faction();
        $this->assertEquals($expected, $actual);
    }

    public function testFinalBlow() {
        $expected = '(gab den letzten Schuss ab)';
        $actual = $this->fixture->finalBlow();
        $this->assertEquals($expected, $actual);
    }
    
    public function testInvolvedParties() {
        $expected = 'Beteiligte Parteien:';
        $actual = $this->fixture->involvedParties();
        $this->assertEquals($expected, $actual);
    }

    public function testMoon() {
        $expected = 'Mond:';
        $actual = $this->fixture->moon();
        $this->assertEquals($expected, $actual);
    }

    public function testName() {
        $expected = 'Name:';
        $actual = $this->fixture->name();
        $this->assertEquals($expected, $actual);
    }

    public function testQty() {
        $expected = ', Anz.:';
        $actual = $this->fixture->qty();
        $this->assertEquals($expected, $actual);
    }

    public function testSecurity() {
        $expected = 'Sicherheit:';
        $actual = $this->fixture->security();
        $this->assertEquals($expected, $actual);
    }

    public function testShip() {
        $expected = 'Schiff:';
        $actual = $this->fixture->ship();
        $this->assertEquals($expected, $actual);
    }

    public function testSystem() {
        $expected = 'System:';
        $actual = $this->fixture->system();
        $this->assertEquals($expected, $actual);
    }

    public function testVictim() {
        $expected = 'Ziel:';
        $actual = $this->fixture->victim();
        $this->assertEquals($expected, $actual);
    }

    public function testWeapon() {
        $expected = 'Waffe:';
        $actual = $this->fixture->weapon();
        $this->assertEquals($expected, $actual);
    }

}

?>

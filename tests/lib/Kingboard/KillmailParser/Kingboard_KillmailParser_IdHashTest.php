<?php

require_once dirname(__FILE__) . '/../../../../lib/Kingboard/KillmailParser/Kingboard_KillmailParser_IdHash.php';

/**
 * Test class for Kingboard_KillmailParser_IdHash.
 * Generated by PHPUnit on 2011-04-05 at 20:44:47.
 */
class Kingboard_KillmailParser_IdHashTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Kingboard_KillmailParser_IdHash
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Kingboard_KillmailParser_IdHash;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    public function testTime() {
        $time = time();
        $this->object->setTime($time);
        $this->assertEquals($time, $this->object->getTime());
        $this->object->setTime(-3);
        $this->assertEquals($time, $this->object->getTime());
    }

    public function testVictimId() {
        $this->object->setVictimId(1234);
        $this->assertEquals(1234, $this->object->getVictimId());
        $this->object->setVictimId(-4);
        $this->assertEquals(1234, $this->object->getVictimId());
    }

    public function testAttackerIds() {
        $this->object->addAttackerId('3');
        $this->object->addAttackerId(-1);
        $this->object->addAttackerId(6);
        $this->assertEquals(array(3,6), $this->object->getAttackerIds());
        $this->object->setAttackerIds(array(2,4));
        $this->assertEquals(array(3,6,2,4), $this->object->getAttackerIds());
    }

    public function testFinalBlowAttackerId() {
        $this->object->setFinalBlowAttackerId('3');
        $this->assertEquals(0, $this->object->getFinalBlowAttackerId());
        $this->object->addAttackerId(3);
        $this->object->setFinalBlowAttackerId('3');
        $this->assertEquals(3, $this->object->getFinalBlowAttackerId());
        $this->object->setFinalBlowAttackerId(-2);
        $this->assertEquals(3, $this->object->getFinalBlowAttackerId());
    }


    public function testGenerateHash() {
        $this->object->setAttackerIds(array(1,4))->setTime(2)->setVictimId(3)->setFinalBlowAttackerId(4);
        $actual = $this->object->generateHash();
        $expected = sha1('23144');
        $this->assertEquals($expected, $actual);
    }

    public function testGenerateHashWithoutParamsRaisesException() {
        $this->setExpectedException('InvalidArgumentException');
        $this->object->generateHash();
    }

    public function testToString() {
        $this->object->setAttackerIds(array(1,4))->setTime(2)->setVictimId(3)->setFinalBlowAttackerId(4);
        $expected = $this->object->generateHash();
        $actual = (string) $this->object;
        $this->assertEquals($expected, $actual);
        $actual = $this->object->__toString();
        $this->assertEquals($expected, $actual);
    }

}

?>

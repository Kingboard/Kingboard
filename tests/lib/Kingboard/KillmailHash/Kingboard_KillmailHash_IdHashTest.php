<?php

/**
 * Test class for Kingboard_KillmailHash_IdHash.
 * Generated by PHPUnit on 2011-04-05 at 20:44:47.
 */
class Kingboard_KillmailHash_IdHashTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Kingboard_KillmailHash_IdHash
     */
    protected $fixture;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->fixture = new Kingboard_KillmailHash_IdHash;
    }

    public function testTime() {
        $time = time();
        $this->fixture->setTime(new MongoDate($time));
        $this->assertEquals($time, $this->fixture->getTime());
        $time = time() - 20;
        $this->fixture->setTime(new MongoDate($time));
        $this->assertEquals($time, $this->fixture->getTime());
    }

    public function testVictimId() {
        $this->fixture->setVictimId(1234);
        $this->assertEquals(1234, $this->fixture->getVictimId());
        $this->fixture->setVictimId(-4);
        $this->assertEquals(1234, $this->fixture->getVictimId());
    }

    public function testAttackerIds() {
        $this->fixture->addAttacker(5);
        $this->fixture->addAttacker('');
        $this->fixture->addAttacker(6);
        $this->assertEquals(array(5, 6), $this->fixture->getAttackers());
        $this->fixture->setAttackers(array(7, 8, 9));
        $this->assertEquals(array(5, 6, 7, 8, 9), $this->fixture->getAttackers());
    }

    public function testFinalBlowAttacker() {
        $this->fixture->setFinalBlowAttacker(1);
        $this->assertEquals(0, $this->fixture->getFinalBlowAttacker());
        $this->fixture->addAttacker(1);
        $this->fixture->setFinalBlowAttacker(1);
        $this->assertEquals(1, $this->fixture->getFinalBlowAttacker());
        $this->fixture->setFinalBlowAttacker(2);
        $this->assertEquals(1, $this->fixture->getFinalBlowAttacker());
    }


    public function testGenerateHash() {
        $time = time() - 4000;
        $this->fixture->setAttackers(array(1, 2))
                      ->setTime(new MongoDate($time))
                      ->setVictimId(3)
                      ->setVictimShip(4)
                      ->setFinalBlowAttacker(1);
        $actual = $this->fixture->generateHash();
        $expected = sha1($time . '34121');
        $this->assertEquals($expected, $actual);
    }

    public function testGenerateHashWithoutParamsRaisesException() {
        $this->setExpectedException('Kingboard_KillmailHash_ErrorException');
        $this->fixture->generateHash();
    }

    public function testToString() {
        $this->fixture->setAttackers(array(1, 2))
                      ->setTime(new MongoDate(time() - 4000))
                      ->setVictimId(3)
                      ->setVictimShip(4)
                      ->setFinalBlowAttacker(1);
        $expected = $this->fixture->generateHash();
        $actual = (string) $this->fixture;
        $this->assertEquals($expected, $actual);
        $actual = $this->fixture->__toString();
        $this->assertEquals($expected, $actual);
    }

}

?>
